'use strict';
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var object_1 = require("./utils/object");
var locales_1 = __importDefault(require("./locales"));
var lang = {
    /**
     * Default lang to be used, when lang is not specified
     */
    defaultLang: 'en',
    /**
     * The existing langs that are supported by the library
     */
    existingLangs: ['en'],
    /**
     * Store the translations passed by the user
     */
    translations: {},
    /**
     * Stores the messages that are already loaded
     */
    messages: {},
    /**
     * Stores the default messages
     */
    defaultMessages: require('./locales/en.js').default,
    /**
     * Path of the validation translations in the main project
     */
    path: '',
    /**
     * Get messages for lang
     */
    get: function (lang) {
        if (lang === void 0) { lang = this.defaultLang; }
        this.load(lang);
        return this.messages[lang];
    },
    /**
     * Set the translation object passed by the user
     */
    setTranslationObject: function (translations) {
        this.translations = translations;
        this.setDefaultLang(this.defaultLang);
    },
    /**
     * Set the path for the validation translations in the main project
     */
    setPath: function (path) {
        this.path = path;
        this.setDefaultLang(this.defaultLang);
    },
    /**
     * Set the default lang that should be used. And assign the default messages
     */
    setDefaultLang: function (lang) {
        this.defaultLang = lang;
        // check if the lang translations exist in the library and load them
        if (locales_1.default.hasOwnProperty(lang)) {
            this.defaultMessages = (0, object_1.mergeDeep)(this.defaultMessages, locales_1.default[lang]);
        }
        // Get the translations from the path specified by the user 
        if (this.path) {
            try {
                var customMessages = require("".concat(this.path, "/").concat(lang, ".js"));
                customMessages = customMessages.default || customMessages;
                this.defaultMessages = (0, object_1.mergeDeep)(this.defaultMessages, customMessages);
            }
            catch (e) { }
            ;
        }
        // check if the lang translations exit in the object passed by the user
        if (this.translations.hasOwnProperty(lang)) {
            this.defaultMessages = (0, object_1.mergeDeep)(this.defaultMessages, this.translations[lang]);
        }
    },
    /**
     * Get the default language
     */
    getDefaultLang: function () {
        return this.defaultLang;
    },
    /**
     * Load the messages based on the specified language
     */
    load: function (lang) {
        if (this.messages[lang]) {
            return;
        }
        // check if the lang translations exist in the library and load them
        if (locales_1.default.hasOwnProperty(lang)) {
            this.messages[lang] = (0, object_1.mergeDeep)(this.defaultMessages, locales_1.default[lang]);
        }
        else {
            this.messages[lang] = (0, object_1.mergeDeep)({}, this.defaultMessages);
        }
        // check if the lang file exists in the project directory and merge the messages
        if (this.path) {
            try {
                var customMessages = require("".concat(this.path, "/").concat(lang, ".js"));
                customMessages = customMessages.default || customMessages;
                this.messages[lang] = (0, object_1.mergeDeep)(this.messages[lang], customMessages);
            }
            catch (e) { }
            ;
        }
        // check if the lang translations exist in the object passed by the user
        if (this.translations.hasOwnProperty(lang)) {
            this.messages[lang] = (0, object_1.mergeDeep)(this.defaultMessages, this.translations[lang]);
        }
    }
};
exports.default = lang;
