"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var baseRule_1 = __importDefault(require("./baseRule"));
var In = /** @class */ (function (_super) {
    __extends(In, _super);
    /**
     * Create a new In rule instance.
     */
    function In(values) {
        var _this = _super.call(this) || this;
        /**
         * The name of the rule.
         */
        _this.rule = 'in';
        /**
         * The accepted values.
         */
        _this.values = [];
        _this.values = values;
        return _this;
    }
    /**
     * Convert the rule to a validation string.
     */
    In.prototype.toString = function () {
        return "".concat(this.rule, ":").concat(this.values.join(','));
    };
    return In;
}(baseRule_1.default));
exports.default = In;
