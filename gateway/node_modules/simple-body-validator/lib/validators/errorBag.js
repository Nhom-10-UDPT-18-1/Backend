'use strict';
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var ErrorBag = /** @class */ (function () {
    function ErrorBag() {
        /**
         * All of the registered messages.
         */
        this.errors = {};
        /**
         * All Messages
         */
        this.messages = {};
        /**
         * Stores the first error message
         */
        this.firstMessage = '';
        /**
         * Specify whether error types should be returned or no
         */
        this.withErrorTypes = false;
    }
    /**
     * Set withErrorTypes attribute to true
     */
    ErrorBag.prototype.addErrorTypes = function () {
        this.withErrorTypes = true;
        return this;
    };
    /**
     * Add new recodrs to the errors and messages objects
     */
    ErrorBag.prototype.add = function (key, error) {
        if (Array.isArray(this.errors[key])) {
            this.errors[key].push(error);
            this.messages[key].push(error.message);
        }
        else {
            this.errors[key] = [error];
            this.messages[key] = [error.message];
        }
        this.firstMessage = this.firstMessage || error.message;
    };
    ;
    /**
     * Get the first error related to a specific key
     */
    ErrorBag.prototype.first = function (key) {
        if (key === void 0) { key = null; }
        if (!key) {
            return this.firstMessage;
        }
        if (this.has(key)) {
            return this.messages[key][0];
        }
        return '';
    };
    ;
    /**
     * Get the error messages keys
     */
    ErrorBag.prototype.keys = function () {
        return Object.keys(this.messages);
    };
    ;
    /**
     * Get all the messages related to a specific key
     */
    ErrorBag.prototype.get = function (key, withErrorTypes) {
        if (withErrorTypes === void 0) { withErrorTypes = this.withErrorTypes; }
        if (!this.has(key)) {
            return [];
        }
        if (withErrorTypes) {
            return this.errors[key];
        }
        return this.messages[key];
    };
    ;
    /**
     * Check if key exists in messages
     */
    ErrorBag.prototype.has = function (key) {
        return this.messages[key] && this.messages[key].length > 0 ? true : false;
    };
    ;
    /**
     * Get all error messages
     */
    ErrorBag.prototype.all = function (allMessages, withErrorTypes) {
        if (allMessages === void 0) { allMessages = true; }
        if (withErrorTypes === void 0) { withErrorTypes = this.withErrorTypes; }
        var messages = withErrorTypes ? __assign({}, this.errors) : __assign({}, this.messages);
        if (!allMessages) {
            Object.keys(messages).map(function (attribute) { return messages[attribute] = messages[attribute][0]; });
        }
        return messages;
    };
    ;
    return ErrorBag;
}());
exports.default = ErrorBag;
