'use strict';
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var object_1 = require("../utils/object");
var validationData = {
    /**
     * initialize and gather data for the given attribute.
     */
    initializeAndGatherData: function (attribute, masterData) {
        var data = (0, object_1.dotify)(this.initializeAttributeOnData(attribute, masterData));
        return __assign(__assign({}, data), this.extractValuesFromWildCards(masterData, data, attribute));
    },
    /**
     * Gather a copy of the attribute data filled with ant missing attributes.
     */
    initializeAttributeOnData: function (attribute, masterData) {
        var explicitPath = this.getLeadingExplicitAttributePath(attribute);
        var data = this.extractDataFromPath(explicitPath, JSON.parse(JSON.stringify(masterData)));
        if (attribute.indexOf('*') === -1 || attribute.indexOf('*') === attribute.length - 1) {
            return data;
        }
        (0, object_1.deepSet)(data, attribute, null);
        return data;
    },
    /**
     * Get all of the exact attribute values for a given wildcard attribute.
     */
    extractValuesFromWildCards: function (masterData, data, attribute) {
        var keys = [];
        var pattern = new RegExp('^' + attribute.replace(/\*/g, '[^\.]*'));
        var result = null;
        for (var key in data) {
            result = key.match(pattern);
            if (result) {
                keys.push(result[0]);
            }
        }
        data = {};
        keys.forEach(function (key) { return data[key] = (0, object_1.deepFind)(masterData, key); });
        return data;
    },
    /**
     * Get the explicit part of the attribute name - ex: 'foo.bar.*.baz' -> 'foo.bar'
     */
    getLeadingExplicitAttributePath: function (attribute) {
        return attribute.split('*')[0].replace(/\.$/, '');
    },
    /**
     * Extract data based on the given dot-notated path.
     */
    extractDataFromPath: function (path, masterData) {
        var results = {};
        var value = (0, object_1.deepFind)(masterData, path);
        if (value !== undefined) {
            (0, object_1.deepSet)(results, path, value);
        }
        return results;
    }
};
exports.default = validationData;
